/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package Producer

import com.github.kittinunf.fuel.Fuel
import com.github.kittinunf.fuel.coroutines.awaitObject
import com.github.kittinunf.fuel.coroutines.awaitUnit
import com.github.kittinunf.fuel.jackson.objectBody
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import kotlin.random.Random
import kotlin.random.nextInt
import kotlin.time.DurationUnit
import kotlin.time.toDuration

class MainProducer(private val numberOfPoint: Int,) {

    private suspend fun fetchStations(): List<WeatherStationDTO> {
        val data = Fuel.get("http://localhost:8080/stations").awaitObject(WeatherStationDTODeserializer)
        println("Fetched ${data.size} stations")
        return data
    }

    fun start() {
        runBlocking(Dispatchers.Default) {
            println("Starting producer, getting stations lists ....")
            fetchStations().forEach {
                launch {
                    println("Starting producer for station ${it.name}")
                    StationProducer(it.id).generateWeatherPoints(numberOfPoint)
                }
            }
        }
    }
}

class StationProducer(private val stationId: String) {

    private val delay = Random.nextInt(100..800).toDuration(DurationUnit.MILLISECONDS)

    private val listWindDirection = listOf(
        "N",
        "NNE",
        "NE",
        "ENE",
        "E",
        "ESE",
        "SE",
        "SSE",
        "S",
        "SSW",
        "SW",
        "WSW",
        "W",
        "WNW",
        "NW",
        "NNW"
    )

    private fun generateWeatherPoint(temp: Double) = WeatherPointDTO(temp, "C", Random.nextInt(1..80).toString() + listWindDirection.random())

    suspend fun generateWeatherPoints(numberOfPoint: Int) {
        var previousTemp = Random.nextDouble(-10.0, 30.0)
        for (i in 1..numberOfPoint) {
            val temp = previousTemp.randomPercent()
            val weatherPoint = generateWeatherPoint(temp)
            println("$i --> $stationId: $weatherPoint")
            sendPoint(weatherPoint)
            previousTemp = temp
            delay(delay)
        }
    }

    private suspend fun sendPoint(weatherPoint: WeatherPointDTO) {
        Fuel.post("http://localhost:8080/stations/$stationId/points")
            .objectBody(weatherPoint)
            .awaitUnit()
    }
}

fun main() {
    MainProducer(100).start()
}
